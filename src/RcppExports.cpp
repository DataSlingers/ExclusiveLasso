// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// exclusive_lasso_penalty
double exclusive_lasso_penalty(const arma::vec& x, const arma::ivec& groups);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_penalty(SEXP xSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_penalty(x, groups));
    return rcpp_result_gen;
END_RCPP
}
// exclusive_lasso_prox
arma::vec exclusive_lasso_prox(const arma::vec& z, const arma::ivec& groups, double lambda, const arma::vec& lower_bound, const arma::vec& upper_bound, double thresh);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_prox(SEXP zSEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_prox(z, groups, lambda, lower_bound, upper_bound, thresh));
    return rcpp_result_gen;
END_RCPP
}
// exclusive_lasso_gaussian_pg
Rcpp::List exclusive_lasso_gaussian_pg(const arma::mat& X, const arma::vec& y, const arma::ivec& groups, const arma::vec& lambda, const arma::vec& w, const arma::vec& o, const arma::vec& lower_bound, const arma::vec& upper_bound, double thresh, double thresh_prox, bool intercept);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_gaussian_pg(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP oSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP threshSEXP, SEXP thresh_proxSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type thresh_prox(thresh_proxSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_gaussian_pg(X, y, groups, lambda, w, o, lower_bound, upper_bound, thresh, thresh_prox, intercept));
    return rcpp_result_gen;
END_RCPP
}
// exclusive_lasso_glm_pg
Rcpp::List exclusive_lasso_glm_pg(const arma::mat& X, const arma::vec& y, const arma::ivec& groups, const arma::vec& lambda, const arma::vec& w, const arma::vec& o, int family, const arma::vec& lower_bound, const arma::vec& upper_bound, double thresh, double thresh_prox, bool intercept);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_glm_pg(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP oSEXP, SEXP familySEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP threshSEXP, SEXP thresh_proxSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type thresh_prox(thresh_proxSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_glm_pg(X, y, groups, lambda, w, o, family, lower_bound, upper_bound, thresh, thresh_prox, intercept));
    return rcpp_result_gen;
END_RCPP
}
// exclusive_lasso_gaussian_cd
Rcpp::List exclusive_lasso_gaussian_cd(const arma::mat& X, const arma::vec& y, const arma::ivec& groups, const arma::vec& lambda, const arma::vec& w, const arma::vec& o, const arma::vec& lower_bound, const arma::vec& upper_bound, double thresh, bool intercept);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_gaussian_cd(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP oSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP threshSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_gaussian_cd(X, y, groups, lambda, w, o, lower_bound, upper_bound, thresh, intercept));
    return rcpp_result_gen;
END_RCPP
}
// exclusive_lasso_glm_cd
Rcpp::List exclusive_lasso_glm_cd(const arma::mat& X, const arma::vec& y, const arma::ivec& groups, const arma::vec& lambda, const arma::vec& w, const arma::vec& o, int family, const arma::vec& lower_bound, const arma::vec& upper_bound, double thresh, double thresh_prox, bool intercept);
RcppExport SEXP _ExclusiveLasso_exclusive_lasso_glm_cd(SEXP XSEXP, SEXP ySEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP oSEXP, SEXP familySEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP threshSEXP, SEXP thresh_proxSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type o(oSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type thresh_prox(thresh_proxSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(exclusive_lasso_glm_cd(X, y, groups, lambda, w, o, family, lower_bound, upper_bound, thresh, thresh_prox, intercept));
    return rcpp_result_gen;
END_RCPP
}
// calculate_exclusive_lasso_df
arma::mat calculate_exclusive_lasso_df(const arma::mat& X, const arma::vec& lambda_vec, const arma::ivec& groups, const arma::sp_mat& coefs);
RcppExport SEXP _ExclusiveLasso_calculate_exclusive_lasso_df(SEXP XSEXP, SEXP lambda_vecSEXP, SEXP groupsSEXP, SEXP coefsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type coefs(coefsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_exclusive_lasso_df(X, lambda_vec, groups, coefs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ExclusiveLasso_exclusive_lasso_penalty", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_penalty, 2},
    {"_ExclusiveLasso_exclusive_lasso_prox", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_prox, 6},
    {"_ExclusiveLasso_exclusive_lasso_gaussian_pg", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_gaussian_pg, 11},
    {"_ExclusiveLasso_exclusive_lasso_glm_pg", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_glm_pg, 12},
    {"_ExclusiveLasso_exclusive_lasso_gaussian_cd", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_gaussian_cd, 10},
    {"_ExclusiveLasso_exclusive_lasso_glm_cd", (DL_FUNC) &_ExclusiveLasso_exclusive_lasso_glm_cd, 12},
    {"_ExclusiveLasso_calculate_exclusive_lasso_df", (DL_FUNC) &_ExclusiveLasso_calculate_exclusive_lasso_df, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ExclusiveLasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
